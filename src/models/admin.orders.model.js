import { Cart } from "../models/Cart.js";
import { Order } from "../models/Order.js";
import { Product } from "../models/Product.js";

export const placeOrder = async (req, res) => {
  try {
    const userId = req.user.id;
    const { shippingAddress } = req.body;

    // Validate required fields
    if (!shippingAddress) {
      return res.status(400).json({
        success: false,
        message: "Shipping address is required"
      });
    }

    // Find user's cart
    const cart = await Cart.findOne({ user: userId }).populate('items.product');
    
    if (!cart || cart.items.length === 0) {
      return res.status(400).json({
        success: false,
        message: "Cart is empty"
      });
    }

    // Validate product availability and get current prices
    const orderItems = [];
    let calculatedSubtotal = 0;

    for (const item of cart.items) {
      const product = item.product;
      
      // Check if product exists and is available
      if (!product) {
        return res.status(400).json({
          success: false,
          message: "One or more products in cart no longer exist"
        });
      }

      const itemPrice = product.price;
      const itemTotal = itemPrice * item.quantity;
      calculatedSubtotal += itemTotal;

      orderItems.push({
        product: product._id,
        quantity: item.quantity,
        price: itemPrice
      });
    }

    // Calculate pricing
    const tax = cart.tax || calculatedSubtotal * 0.1;
    const shipping = cart.shipping?.cost || 5.99;
    const discount = cart.promoCode?.discount || 0;
    
    let total;
    if (cart.promoCode?.discountType === 'percentage') {
      const discountAmount = (calculatedSubtotal * discount) / 100;
      total = calculatedSubtotal + tax + shipping - discountAmount;
    } else {
      total = calculatedSubtotal + tax + shipping - discount;
    }

    // Create order - matching the Order schema exactly
    const order = new Order({
      user: userId,
      items: orderItems, // Now properly defined
      shippingAddress, // Matches schema structure
      pricing: {
        subtotal: calculatedSubtotal,
        tax,
        shipping,
        discount: cart.promoCode?.discountType === 'percentage' 
          ? (calculatedSubtotal * discount) / 100 
          : discount,
        total
      }
      // status defaults to 'pending' as defined in schema
      // orderNumber will be auto-generated by pre-save hook
    });

    await order.save();

    // Clear the cart after successful order
    await Cart.findByIdAndUpdate(cart._id, { 
      items: [],
      subtotal: 0,
      tax: 0,
      total: 0
    });

    // Populate order for response
    await order.populate([
      { path: 'user', select: 'name email' },
      { path: 'items.product', select: 'name image price' }
    ]);

    res.status(201).json({
      success: true,
      message: "Order placed successfully",
      order: {
        id: order._id,
        orderNumber: order.orderNumber,
        status: order.status,
        total: order.pricing.total,
        createdAt: order.createdAt,
        items: order.items,
        shippingAddress: order.shippingAddress
      }
    });

  } catch (error) {
    console.error("Error placing order:", error);
    res.status(500).json({
      success: false,
      message: "Failed to place order",
      error: error.message
    });
  }
};